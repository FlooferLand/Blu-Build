using System.IO;
using JetBrains.Annotations;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEditor.Callbacks;
using UnityEngine;

public class InternalInfoWriter : IPreprocessBuildWithReport {
    private const string targetFile = "InternalGameData.gen.cs";

    public int callbackOrder => 0;

    public void OnPreprocessBuild(BuildReport report) {
        WriteData();
    }

    [DidReloadScripts]
    public static void WriteData() {
        string finalPath = Path.Combine(Application.dataPath, "Scripts", "Generated", targetFile);
        
        #region Writing de data
        string newText = $"// Generated by {nameof(InternalInfoWriter)}\n\n";
        newText += "public static class InternalGameData\r\n {\r\n";
        newText += FormatVar("gameName", PlayerSettings.productName);
        newText += FormatVarEnum("buildType", GetBuildTypeEnum() ?? GameBuildType.Faz);
        if (PlayerSettings.bundleVersion.Length == 7) {
            newText += FormatVar("gameVersion", PlayerSettings.bundleVersion[..^3]);
            newText += FormatVar("isVR", true);
        } else {
            newText += FormatVar("gameVersion", PlayerSettings.bundleVersion);
            newText += FormatVar("isVR", false);
        }
        
        newText += "}";
        #endregion

        string currentText = File.ReadAllText(finalPath);
        if (currentText != newText) {
            Debug.Log("Updated Internal Game Version (generated)");

            File.WriteAllText(finalPath, newText);
            AssetDatabase.Refresh();
        }
    }

    private static string FormatVar(string name, string value) {
        return $"\tpublic static readonly string {name} = \"{value}\";\r\n";
    }
    private static string FormatVar(string name, bool value) {
        string boolStr = value ? "true" : "false";
        return $"\tpublic static readonly bool {name} = {boolStr};\r\n";
    }
    private static string FormatVar<T>(string name, T value) {
        return $"\tpublic static readonly {typeof(T).Name} {name} = {value};\r\n";
    }
    private static string FormatVarEnum<T>(string name, T value) {
        return $"\tpublic static readonly {typeof(T).Name} {name} = {typeof(T).Name}.{value};\r\n";
    }
    
    private static GameBuildType? GetBuildTypeEnum() {
        string path = Path.GetFileNameWithoutExtension(GameInfoManager.PersistentFileName);
        var resource = Resources.Load<TextAsset>(path);
        if (resource is { } asset) {
            string text = asset.text.Trim().ToLower();
            GameBuildType? type;
            switch (text) {
                case GameInfoManager.FazAnimIdent:
                    type = GameBuildType.Faz;
                    break;
                case GameInfoManager.CdIdent:
                    type = GameBuildType.Cd;
                    break;
                default:
                    type = null;
                    break;
            }

            if (type == null) {
                Debug.LogError($"Incorrect file contents found at \"{path}\"");
            }
            return type;
        }

        Debug.LogError($"Error finding/reading the file \"{path}\" (type is {resource?.GetType().Name ?? "null"})");
        return null;
    }
}